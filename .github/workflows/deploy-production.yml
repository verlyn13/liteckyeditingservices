name: deploy-production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  noop:
    if: ${{ secrets.CF_GIT_CONNECTED == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "CF_GIT_CONNECTED=true; skipping wrangler deploy"

  deploy:
    if: ${{ secrets.CF_GIT_CONNECTED != 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      CF_PAGES_PROJECT_NAME: litecky-editing-services
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Install Wrangler
        run: pnpm add -D wrangler@^4

      - name: Wrangler whoami (sanity)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: pnpm exec wrangler whoami

      - name: Deploy to Cloudflare Pages (dist â†’ preview)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          pnpm exec wrangler pages deploy dist \
            --project-name=${{ env.CF_PAGES_PROJECT_NAME }} \
            --commit-message "CI deploy from $GITHUB_SHA"

      - name: Promote latest preview to Production (API)
        if: ${{ success() }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -euo pipefail
          echo "Fetching latest preview deployment as JSON..."
          pnpm exec wrangler pages deployment list \
            --project-name=${{ env.CF_PAGES_PROJECT_NAME }} \
            --environment=preview --json > preview.json
          DEPLOYMENT_ID=$(node -e 'const j=require("./preview.json"); if(!j.result||!j.result.length){process.exit(1)} j.result.sort((a,b)=>new Date(b.created_on)-new Date(a.created_on)); console.log(j.result[0].id)')
          echo "Latest preview deployment: $DEPLOYMENT_ID"
          echo "Promoting to production..."
          curl -fsSL -X POST \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/pages/projects/${CF_PAGES_PROJECT_NAME}/deployments/${DEPLOYMENT_ID}/production" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/json" \
            | tee promote.json
          node -e 'const r=require("./promote.json"); if(!r.success){console.error(r); process.exit(1)} else { console.log("Promotion success") }'

      # Note: If the project is Git-connected in Pages, pushes to main will create a Production deployment automatically.
      # If not Git-connected, this action creates a Preview deployment; promote it to Production in the Pages dashboard.
