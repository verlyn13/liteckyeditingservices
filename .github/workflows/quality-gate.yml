name: Quality Gate

on:
  pull_request:
    paths-ignore:
      - '_archive/**'
      - '**/*.md'
      - 'docs/**'
  push:
    branches: [main]

# Cancel in-progress runs for PRs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # Preflight check to verify CI configuration
  preflight:
    name: Verify CI Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Check required repository secrets
        run: |
          echo "Checking required secrets and variables..."

          # Check required secrets (we can't read values, just check if set)
          required_secrets=(
            "SENTRY_AUTH_TOKEN"
            "CLOUDFLARE_API_TOKEN"
            "CLOUDFLARE_ACCOUNT_ID"
          )

          # Check required variables (these are public)
          if [ -z "${{ vars.SENTRY_ORG }}" ]; then
            echo "ERROR: SENTRY_ORG variable not set"
            exit 1
          fi

          if [ -z "${{ vars.SENTRY_PROJECT }}" ]; then
            echo "ERROR: SENTRY_PROJECT variable not set"
            exit 1
          fi

          if [ -z "${{ vars.CF_GIT_CONNECTED }}" ]; then
            echo "WARNING: CF_GIT_CONNECTED variable not set (defaulting to false)"
          fi

          echo "✅ All required CI configuration verified"

  validate-structure:
    name: Validate Repository Structure
    runs-on: ubuntu-latest
    needs: preflight
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'pnpm'

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate structure and paths
        run: pnpm run validate:all

      - name: Check repository structure
        run: node scripts/validate/repo-structure.mjs

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: preflight
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'pnpm'

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Biome check
        run: pnpm run biome:check

      - name: Typecheck
        run: pnpm run typecheck

      - name: Build project
        run: pnpm build

      - name: Verify sourcemaps exist
        run: |
          echo "Checking for sourcemap files..."
          if ! find dist -name "*.map" -type f | head -1; then
            echo "WARNING: No sourcemap files found in dist/"
            echo "Sentry error tracking may not work properly"
          else
            echo "✅ Sourcemap files found:"
            find dist -name "*.map" -type f | head -5
          fi

      - name: Check Sentry configuration
        id: sentry-check
        run: |
          if [ -z "${{ secrets.SENTRY_AUTH_TOKEN }}" ]; then
            echo "⚠️  SENTRY_AUTH_TOKEN not configured"
            echo "Sentry release upload will be skipped"
            echo "To enable: Add SENTRY_AUTH_TOKEN to GitHub repository secrets"
            echo "configured=false" >> $GITHUB_OUTPUT
          else
            echo "✅ SENTRY_AUTH_TOKEN configured"
            echo "configured=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Sentry release and upload source maps
        if: steps.sentry-check.outputs.configured == 'true'
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ vars.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT }}
        with:
          environment: ${{ github.ref_name == 'main' && 'production' || 'preview' }}
          version: ${{ github.sha }}
          sourcemaps: ./dist
          url_prefix: ~/
          finalize: true
          set_commits: auto
          ignore_missing: true
          ignore_empty: true

      # Note: Add `pnpm exec playwright install chromium` here when E2E tests are enabled

      - name: Verify wrangler version
        run: pnpm exec wrangler --version

  docs-gate:
    name: Documentation Gate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Check documentation updates
        run: node scripts/gates/require-docs.mjs
        env:
          GITHUB_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
