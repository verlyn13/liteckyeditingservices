name: post-deploy-validation

on:
  push:
    branches: [main]
  workflow_dispatch:
  workflow_run:
    workflows: ['deploy-production']
    types: ['completed']

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      CI: true
      BASE_URL: https://www.liteckyeditingservices.com
      PLAYWRIGHT_BASE_URL: https://www.liteckyeditingservices.com
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for production to be live
        env:
          URL: https://www.liteckyeditingservices.com
        run: |
          chmod +x scripts/ci/probe.sh
          scripts/ci/probe.sh "$URL" "" 30 10

      - name: Quick header check (200 + CSP/XFO)
        run: |
          set -euo pipefail
          curl -sI "$BASE_URL" | tee headers.txt
          test $(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL") -eq 200
          grep -i "content-security-policy\|x-frame-options\|strict-transport-security" -n headers.txt || true

      - name: Assert admin CSP (no third-party CDNs; no 'unsafe-inline' in script-src)
        run: |
          set -euo pipefail
          hdr=$(curl -sI "$BASE_URL/admin/" | awk 'BEGIN{IGNORECASE=1} /^content-security-policy:/ {sub(/\r$/,"");print}')
          echo "$hdr"
          echo "$hdr" | grep -Eiq 'jsdelivr|unpkg' && { echo "CSP should NOT allow third-party script hosts (self-hosted)"; exit 1; } || true
          echo "$hdr" | grep -qi "script-src 'self'" || { echo "CSP missing script-src 'self' on /admin/"; exit 1; }
          # Extract only the script-src directive and ensure it does NOT contain 'unsafe-inline'
          script_dir=$(echo "$hdr" | awk 'BEGIN{IGNORECASE=1} /^content-security-policy:/ {match($0,/script-src[^;]*/); if (RSTART>0) print substr($0,RSTART,RLENGTH)}')
          echo "script-src => $script_dir"
          echo "$script_dir" | grep -qi "'unsafe-inline'" && { echo "script-src should NOT include 'unsafe-inline' on /admin/ (hardened October 2025)"; exit 1; } || true

      - name: Assert admin COOP allows popup handoff
        run: |
          set -euo pipefail
          coop=$(curl -sI "$BASE_URL/admin/" | awk 'BEGIN{IGNORECASE=1} /^cross-origin-opener-policy:/ {sub(/\r$/,"");print}')
          echo "$coop"
          echo "$coop" | grep -qi "unsafe-none" || { echo "COOP must be 'unsafe-none' on /admin/ for OAuth popup handoff"; exit 1; }
          coep=$(curl -sI "$BASE_URL/admin/" | awk 'BEGIN{IGNORECASE=1} /^cross-origin-embedder-policy:/ {print}')
          if [ -n "$coep" ]; then
            echo "COEP must NOT be set on /admin/ (breaks popup handoff): $coep"; exit 1;
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.1

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Production smoke tests
        run: |
          BASE_URL=$BASE_URL pnpm test:smoke
          pnpm test:cms:prod

      - name: Production CMS header tests
        run: |
          pnpm test:cms:headers:prod

      - name: Media paths sanity (repo-side)
        run: |
          node tests/media-paths-check.mjs

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 7
