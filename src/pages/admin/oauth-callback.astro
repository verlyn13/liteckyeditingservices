---
// OAuth callback page for Decap CMS
// This page receives the token from the OAuth worker and posts it to the opener
// Must be on the same origin as /admin/ for Decap CMS to accept the message
---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="robots" content="noindex" />
    <title>Authenticatingâ€¦</title>
  </head>
  <body>
    <p>Authenticating, please wait...</p>
    <script is:inline>
      (function() {
        // Check if this window was opened by another window
        if (!window.opener) {
          document.body.innerHTML = '<p style="color:red;">Error: This page should be opened in a popup.</p>';
          return;
        }

        try {
          // Use URLSearchParams to safely parse the hash
          const params = new URLSearchParams(window.location.hash.substring(1));
          const token = params.get('token');
          const state = params.get('state');

          if (!token || !state) {
            throw new Error('Authentication parameters (token, state) not found in URL hash.');
          }

          // **This is the EXACT message format Decap CMS expects**
          const messagePayload = {
            provider: 'github',
            token_type: 'bearer', // This is required
            token: token,
            state: state
          };
          const message = 'authorization:github:success:' + JSON.stringify(messagePayload);

          console.log('[OAuth Callback] Sending message to opener with state:', state);
          console.log('[OAuth Callback] Message preview:', message.substring(0, 80) + '...');

          // Post the message to the parent window (the /admin page)
          // Specify the target origin for security
          window.opener.postMessage(message, window.location.origin);

          console.log('[OAuth Callback] Message posted to opener');

          // Listen for ACK and close popup
          function onAck(e) {
            if (e.data === 'authorization:ack') {
              console.log('[OAuth Callback] Received ACK from opener');
              window.removeEventListener('message', onAck);
              setTimeout(function() { window.close(); }, 50);
            }
          }
          window.addEventListener('message', onAck);

          // Failsafe close after 2.5s
          setTimeout(function() {
            console.log('[OAuth Callback] Closing popup (failsafe)');
            window.close();
          }, 2500);

        } catch (err) {
          console.error('[OAuth Callback] Error:', err);
          // Let the opener know something went wrong
          try {
            window.opener.postMessage('authorization:github:error:' + JSON.stringify({ message: err.message }), window.location.origin);
          } catch (e) {
            console.error('[OAuth Callback] Failed to send error message:', e);
          }
          document.body.innerHTML = '<p style="color:red;">Error: ' + err.message + '</p>';
        }
      })();
    </script>
  </body>
</html>
